
rp6 rijd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083f  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b8  00000000  00000000  00000aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ad  00000000  00000000  000010a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000157  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000191d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  64:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <motoren>:
    }
}

void motoren()
{
		PORTC|=(12&0);									//motor richting instellen
  6c:	85 b3       	in	r24, 0x15	; 21
  6e:	85 bb       	out	0x15, r24	; 21
		OCR1A = 255;										//motor snelheid links
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	9b bd       	out	0x2b, r25	; 43
  76:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 255;
  78:	99 bd       	out	0x29, r25	; 41
  7a:	88 bd       	out	0x28, r24	; 40
		for(int i;i<32;i++)
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	e3 e2       	ldi	r30, 0x23	; 35
  82:	f4 ef       	ldi	r31, 0xF4	; 244
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <motoren+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <motoren+0x1e>
  8a:	00 00       	nop
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	80 32       	cpi	r24, 0x20	; 32
  90:	91 05       	cpc	r25, r1
  92:	b1 f7       	brne	.-20     	; 0x80 <motoren+0x14>
		{
			_delay_ms(250);
		}
		PORTC|=(12&0);									//motor richting instellen
  94:	85 b3       	in	r24, 0x15	; 21
  96:	85 bb       	out	0x15, r24	; 21
		OCR1A = 255;										//motor snelheid links
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	9b bd       	out	0x2b, r25	; 43
  9e:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 140;
  a0:	8c e8       	ldi	r24, 0x8C	; 140
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	99 bd       	out	0x29, r25	; 41
  a6:	88 bd       	out	0x28, r24	; 40
		for(int i;i<32;i++)
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	e3 e2       	ldi	r30, 0x23	; 35
  ae:	f4 ef       	ldi	r31, 0xF4	; 244
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <motoren+0x44>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <motoren+0x4a>
  b6:	00 00       	nop
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	80 32       	cpi	r24, 0x20	; 32
  bc:	91 05       	cpc	r25, r1
  be:	b1 f7       	brne	.-20     	; 0xac <motoren+0x40>
		{
			_delay_ms(250);
		}
		PORTC|=(12&0);									//motor richting instellen
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	85 bb       	out	0x15, r24	; 21
		OCR1A = 140;										//motor snelheid links
  c4:	8c e8       	ldi	r24, 0x8C	; 140
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	9b bd       	out	0x2b, r25	; 43
  ca:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 255;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	99 bd       	out	0x29, r25	; 41
  d2:	88 bd       	out	0x28, r24	; 40
		for(int i;i<32;i++)
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	e3 e2       	ldi	r30, 0x23	; 35
  da:	f4 ef       	ldi	r31, 0xF4	; 244
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <motoren+0x70>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <motoren+0x76>
  e2:	00 00       	nop
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	80 32       	cpi	r24, 0x20	; 32
  e8:	91 05       	cpc	r25, r1
  ea:	b1 f7       	brne	.-20     	; 0xd8 <motoren+0x6c>
		{
			_delay_ms(250);
		}
		PORTC|=(12&0);									//motor richting instellen
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	85 bb       	out	0x15, r24	; 21
		OCR1A = 0;										//motor snelheid links
  f0:	1b bc       	out	0x2b, r1	; 43
  f2:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
  f4:	19 bc       	out	0x29, r1	; 41
  f6:	18 bc       	out	0x28, r1	; 40
		for(int i;i<32;i++)
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e3 e2       	ldi	r30, 0x23	; 35
  fe:	f4 ef       	ldi	r31, 0xF4	; 244
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <motoren+0x94>
 104:	00 c0       	rjmp	.+0      	; 0x106 <motoren+0x9a>
 106:	00 00       	nop
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	80 32       	cpi	r24, 0x20	; 32
 10c:	91 05       	cpc	r25, r1
 10e:	b1 f7       	brne	.-20     	; 0xfc <motoren+0x90>
		{
			_delay_ms(250);
		}
		PORTC|=(12&4);									//motor richting instellen
 110:	aa 9a       	sbi	0x15, 2	; 21
		OCR1A = 0;										//motor snelheid links
 112:	1b bc       	out	0x2b, r1	; 43
 114:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 255;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	99 bd       	out	0x29, r25	; 41
 11c:	88 bd       	out	0x28, r24	; 40
		for(int i;i<32;i++)
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	e3 e2       	ldi	r30, 0x23	; 35
 124:	f4 ef       	ldi	r31, 0xF4	; 244
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <motoren+0xba>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <motoren+0xc0>
 12c:	00 00       	nop
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	80 32       	cpi	r24, 0x20	; 32
 132:	91 05       	cpc	r25, r1
 134:	b1 f7       	brne	.-20     	; 0x122 <motoren+0xb6>
		{
			_delay_ms(250);
		}
		PORTC|=(12&8);									//motor richting instellen
 136:	ab 9a       	sbi	0x15, 3	; 21
		OCR1A = 255;										//motor snelheid links
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	9b bd       	out	0x2b, r25	; 43
 13e:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 0;
 140:	19 bc       	out	0x29, r1	; 41
 142:	18 bc       	out	0x28, r1	; 40
		for(int i;i<32;i++)
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	e3 e2       	ldi	r30, 0x23	; 35
 14a:	f4 ef       	ldi	r31, 0xF4	; 244
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <motoren+0xe0>
 150:	00 c0       	rjmp	.+0      	; 0x152 <motoren+0xe6>
 152:	00 00       	nop
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	80 32       	cpi	r24, 0x20	; 32
 158:	91 05       	cpc	r25, r1
 15a:	b1 f7       	brne	.-20     	; 0x148 <motoren+0xdc>
		{
			_delay_ms(250);
		}
		PORTC|=(12&12);									//motor richting instellen
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8c 60       	ori	r24, 0x0C	; 12
 160:	85 bb       	out	0x15, r24	; 21
		OCR1A = 255;										//motor snelheid links
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	9b bd       	out	0x2b, r25	; 43
 168:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 255;
 16a:	99 bd       	out	0x29, r25	; 41
 16c:	88 bd       	out	0x28, r24	; 40
		for(int i;i<32;i++)
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	e3 e2       	ldi	r30, 0x23	; 35
 174:	f4 ef       	ldi	r31, 0xF4	; 244
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <motoren+0x10a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <motoren+0x110>
 17c:	00 00       	nop
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	80 32       	cpi	r24, 0x20	; 32
 182:	91 05       	cpc	r25, r1
 184:	b1 f7       	brne	.-20     	; 0x172 <motoren+0x106>
		{
			_delay_ms(250);
		}
}
 186:	08 95       	ret

00000188 <pwm_init>:

void pwm_init()
{
	TCNT1 = 0;
 188:	1d bc       	out	0x2d, r1	; 45
 18a:	1c bc       	out	0x2c, r1	; 44
	TCCR1A = (0 << WGM10) | (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
 18c:	82 ea       	ldi	r24, 0xA2	; 162
 18e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (0 << WGM12) | (1 << CS10);
 190:	81 e1       	ldi	r24, 0x11	; 17
 192:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 0xFF;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	97 bd       	out	0x27, r25	; 39
 19a:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0x50;
 19c:	80 e5       	ldi	r24, 0x50	; 80
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	9b bd       	out	0x2b, r25	; 43
 1a2:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0x50;
 1a4:	99 bd       	out	0x29, r25	; 41
 1a6:	88 bd       	out	0x28, r24	; 40

	// make sure to make OC0 pin (pin PB3 for atmega32) as output pin
	DDRD|=MOTOR_R;
 1a8:	8d 9a       	sbi	0x11, 5	; 17
	DDRD|=MOTOR_L;
 1aa:	8c 9a       	sbi	0x11, 4	; 17
 1ac:	08 95       	ret

000001ae <main>:

void pwm_init();
void motoren();
int main(void)
{
	pwm_init();
 1ae:	0e 94 c4 00 	call	0x188	; 0x188 <pwm_init>
    /* Replace with your application code */
    while (1) 
    {
		motoren();
 1b2:	0e 94 36 00 	call	0x6c	; 0x6c <motoren>
    }
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <main+0x4>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
