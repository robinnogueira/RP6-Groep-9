
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800072  00800072  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008be  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000699  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000381  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ab  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000280  00000000  00000000  00001af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001d77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8a:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_i2c_slave>:
void writeInteger(int16_t number, uint8_t base)
{
	char buffer[17];
	itoa(number, &buffer[0], base);
	writeString(&buffer[0]);
}
  92:	11 b8       	out	0x01, r1	; 1
  94:	90 e2       	ldi	r25, 0x20	; 32
  96:	90 b9       	out	0x00, r25	; 0
  98:	95 e4       	ldi	r25, 0x45	; 69
  9a:	96 bf       	out	0x36, r25	; 54
  9c:	88 0f       	add	r24, r24
  9e:	82 b9       	out	0x02, r24	; 2
  a0:	08 95       	ret

000000a2 <writeChar>:
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <writeChar>
  a6:	8c b9       	out	0x0c, r24	; 12
  a8:	08 95       	ret

000000aa <writeString>:
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	88 81       	ld	r24, Y
  b2:	88 23       	and	r24, r24
  b4:	31 f0       	breq	.+12     	; 0xc2 <writeString+0x18>
  b6:	21 96       	adiw	r28, 0x01	; 1
  b8:	0e 94 51 00 	call	0xa2	; 0xa2 <writeChar>
  bc:	89 91       	ld	r24, Y+
  be:	81 11       	cpse	r24, r1
  c0:	fb cf       	rjmp	.-10     	; 0xb8 <writeString+0xe>
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <initUSART>:
  c8:	10 bc       	out	0x20, r1	; 32
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	89 b9       	out	0x09, r24	; 9
  ce:	1b b8       	out	0x0b, r1	; 11
  d0:	86 e8       	ldi	r24, 0x86	; 134
  d2:	80 bd       	out	0x20, r24	; 32
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <writeString>
  e0:	08 95       	ret

000000e2 <main>:
volatile uint8_t data_flag = FALSE;

int main(void)
{

	DDRC=0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
	initUSART();
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <initUSART>
	init_i2c_slave(8);
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	0e 94 49 00 	call	0x92	; 0x92 <init_i2c_slave>
	sei(); //De slave van i2c werkt met interrupt
  f0:	78 94       	sei
    while (1) 
    {    

    }
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x10>

000000f4 <rijden>:
	
}

void rijden()
{
	PORTC|=(12&motoren[0]);
  f4:	e9 e7       	ldi	r30, 0x79	; 121
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	95 b3       	in	r25, 0x15	; 21
  fc:	8c 70       	andi	r24, 0x0C	; 12
  fe:	89 2b       	or	r24, r25
 100:	85 bb       	out	0x15, r24	; 21
	OCR1A = motoren[1];
 102:	81 81       	ldd	r24, Z+1	; 0x01
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	9b bd       	out	0x2b, r25	; 43
 108:	8a bd       	out	0x2a, r24	; 42
	OCR1B = motoren[2];
 10a:	82 81       	ldd	r24, Z+2	; 0x02
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	99 bd       	out	0x29, r25	; 41
 110:	88 bd       	out	0x28, r24	; 40
 112:	08 95       	ret

00000114 <slaaftwi>:
	TWAR = ad<<1;
}

void slaaftwi() {
	static uint8_t teller=0;
	switch(TWSR) {
 114:	81 b1       	in	r24, 0x01	; 1
 116:	80 38       	cpi	r24, 0x80	; 128
 118:	c1 f0       	breq	.+48     	; 0x14a <slaaftwi+0x36>
 11a:	38 f4       	brcc	.+14     	; 0x12a <slaaftwi+0x16>
 11c:	80 31       	cpi	r24, 0x10	; 16
 11e:	61 f0       	breq	.+24     	; 0x138 <slaaftwi+0x24>
 120:	80 36       	cpi	r24, 0x60	; 96
 122:	81 f0       	breq	.+32     	; 0x144 <slaaftwi+0x30>
 124:	88 30       	cpi	r24, 0x08	; 8
 126:	91 f5       	brne	.+100    	; 0x18c <slaaftwi+0x78>
 128:	07 c0       	rjmp	.+14     	; 0x138 <slaaftwi+0x24>
 12a:	88 3a       	cpi	r24, 0xA8	; 168
 12c:	e9 f0       	breq	.+58     	; 0x168 <slaaftwi+0x54>
 12e:	88 3b       	cpi	r24, 0xB8	; 184
 130:	11 f1       	breq	.+68     	; 0x176 <slaaftwi+0x62>
 132:	80 3a       	cpi	r24, 0xA0	; 160
 134:	59 f5       	brne	.+86     	; 0x18c <slaaftwi+0x78>
 136:	15 c0       	rjmp	.+42     	; 0x162 <slaaftwi+0x4e>
	case 0x10:			//repeat start
	case 0x08:			//start
	for (int i=0;i<3;i++)
		motoren[i]=0;
 138:	e9 e7       	ldi	r30, 0x79	; 121
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	10 82       	st	Z, r1
 13e:	11 82       	std	Z+1, r1	; 0x01
 140:	12 82       	std	Z+2, r1	; 0x02
 142:	24 c0       	rjmp	.+72     	; 0x18c <slaaftwi+0x78>
	break;
	
	case 0x60:			//TW_SR_SLA_ACK

	teller=0;
 144:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>

	break;
 148:	21 c0       	rjmp	.+66     	; 0x18c <slaaftwi+0x78>
	case 0x68:			//TW_SR_ARB_LOST_SLA_ACK

	break;
	case 0x80:			//W_SR_DATA_ACK
	motoren[teller++] = TWDR;
 14a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	8e 0f       	add	r24, r30
 152:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	83 b1       	in	r24, 0x03	; 3
 15a:	e7 58       	subi	r30, 0x87	; 135
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	80 83       	st	Z, r24

	break;
 160:	15 c0       	rjmp	.+42     	; 0x18c <slaaftwi+0x78>
	case 0xA0:			//TW_SR_STOP
	rijden();
 162:	0e 94 7a 00 	call	0xf4	; 0xf4 <rijden>
	break;
 166:	12 c0       	rjmp	.+36     	; 0x18c <slaaftwi+0x78>
	case 0xA8:			//TW_ST_SLA_ACK
	teller=0;
	TWDR=sensoren[teller++];
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 16e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <sensoren>
 172:	83 b9       	out	0x03, r24	; 3
	break;
 174:	0b c0       	rjmp	.+22     	; 0x18c <slaaftwi+0x78>
	case 0xB8:			//TW_ST_DATA_ACK
	TWDR=sensoren[teller++];
 176:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	8e 0f       	add	r24, r30
 17e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ed 58       	subi	r30, 0x8D	; 141
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
 18a:	83 b9       	out	0x03, r24	; 3
	case 0xC0:   //NACK		TW_ST_DATA_NACK
	break;
	case 0xC8:			//TW_ST_LAST_DATA
	break;
	}
	TWCR |= (1<<TWINT);    // Clear TWINT Flag
 18c:	86 b7       	in	r24, 0x36	; 54
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	86 bf       	out	0x36, r24	; 54
 192:	08 95       	ret

00000194 <__vector_19>:

/*de interrupt routine van de i2c
de functie slaaftwi() staat in de library
*/

ISR(TWI_vect) {
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31

	slaaftwi();
 1b6:	0e 94 8a 00 	call	0x114	; 0x114 <slaaftwi>

}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
