
Arduinocode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  00000428  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d1  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052f  00000000  00000000  00000bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b3  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032d  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001831  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  54:	59 01       	movw	r10, r18
  56:	62 01       	movw	r12, r4
  58:	65 01       	movw	r12, r10
  5a:	81 01       	movw	r16, r2
  5c:	68 01       	movw	r12, r16
  5e:	6b 01       	movw	r12, r22
  60:	70 01       	movw	r14, r0
  62:	81 01       	movw	r16, r2
  64:	75 01       	movw	r14, r10
  66:	78 01       	movw	r14, r16
  68:	7d 01       	movw	r14, r26

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 01 	call	0x290	; 0x290 <main>
  8a:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <rechtdoor>:

//TODO doe iets met sensoren
//TODO pad planning implementeren

void rechtdoor () {
	if (langeafstand == 1) {
  92:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <langeafstand>
  96:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <langeafstand+0x1>
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	59 f5       	brne	.+86     	; 0xf4 <rechtdoor+0x62>
		switch(motor[0]) {
  9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <motor>
  a2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <motor+0x1>
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	91 05       	cpc	r25, r1
  aa:	51 f0       	breq	.+20     	; 0xc0 <rechtdoor+0x2e>
  ac:	1c f4       	brge	.+6      	; 0xb4 <rechtdoor+0x22>
  ae:	89 2b       	or	r24, r25
  b0:	69 f5       	brne	.+90     	; 0x10c <rechtdoor+0x7a>
  b2:	06 c0       	rjmp	.+12     	; 0xc0 <rechtdoor+0x2e>
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	91 05       	cpc	r25, r1
  b8:	19 f0       	breq	.+6      	; 0xc0 <rechtdoor+0x2e>
  ba:	0c 97       	sbiw	r24, 0x0c	; 12
  bc:	79 f0       	breq	.+30     	; 0xdc <rechtdoor+0x4a>
  be:	08 95       	ret
			case 0:
			case 4:
			case 8:
				motor[0] = 0;
  c0:	e2 e6       	ldi	r30, 0x62	; 98
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	11 82       	std	Z+1, r1	; 0x01
  c6:	10 82       	st	Z, r1
				motor[1] = snelheid + 25;
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  d0:	49 96       	adiw	r24, 0x19	; 25
  d2:	93 83       	std	Z+3, r25	; 0x03
  d4:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = snelheid + 25;
  d6:	95 83       	std	Z+5, r25	; 0x05
  d8:	84 83       	std	Z+4, r24	; 0x04
			break;
  da:	08 95       	ret
			//Als de RP6 vooruit rijd of om zijn as draait willen we dat deze (meer) snelheid maakt
			
			case 12:
				motor[0] = 12;
				motor[1] = snelheid - 25;
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  e4:	49 97       	sbiw	r24, 0x19	; 25
  e6:	e2 e6       	ldi	r30, 0x62	; 98
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	93 83       	std	Z+3, r25	; 0x03
  ec:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = snelheid - 25;
  ee:	95 83       	std	Z+5, r25	; 0x05
  f0:	84 83       	std	Z+4, r24	; 0x04
			break;
  f2:	08 95       	ret
			//Als de RP6 achteruit rijd willen we dat deze in snelheid mindert
			}
		} else {
		motor[0] = 0;
  f4:	e2 e6       	ldi	r30, 0x62	; 98
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
		motor[1] = instelsnelheid;
  fc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <instelsnelheid>
 100:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <instelsnelheid+0x1>
 104:	93 83       	std	Z+3, r25	; 0x03
 106:	82 83       	std	Z+2, r24	; 0x02
		motor[2] = instelsnelheid;
 108:	95 83       	std	Z+5, r25	; 0x05
 10a:	84 83       	std	Z+4, r24	; 0x04
 10c:	08 95       	ret

0000010e <achteruit>:
		//Als de RP6 in de andere mode zit willen we dat deze met de ingestelde snelheid naar achteren rijd
	}
	return;
}
void achteruit () {
	if (langeafstand == 1) {
 10e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <langeafstand>
 112:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <langeafstand+0x1>
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	69 f5       	brne	.+90     	; 0x174 <achteruit+0x66>
		switch(motor[0]) {
 11a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <motor>
 11e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <motor+0x1>
 122:	84 30       	cpi	r24, 0x04	; 4
 124:	91 05       	cpc	r25, r1
 126:	b1 f0       	breq	.+44     	; 0x154 <achteruit+0x46>
 128:	1c f4       	brge	.+6      	; 0x130 <achteruit+0x22>
 12a:	89 2b       	or	r24, r25
 12c:	39 f0       	breq	.+14     	; 0x13c <achteruit+0x2e>
 12e:	08 95       	ret
 130:	88 30       	cpi	r24, 0x08	; 8
 132:	91 05       	cpc	r25, r1
 134:	79 f0       	breq	.+30     	; 0x154 <achteruit+0x46>
 136:	0c 97       	sbiw	r24, 0x0c	; 12
 138:	59 f5       	brne	.+86     	; 0x190 <achteruit+0x82>
 13a:	0c c0       	rjmp	.+24     	; 0x154 <achteruit+0x46>
			case 0:
				motor[0] = 0;
				motor[1] = snelheid - 25;
 13c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 140:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 144:	49 97       	sbiw	r24, 0x19	; 25
 146:	e2 e6       	ldi	r30, 0x62	; 98
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	93 83       	std	Z+3, r25	; 0x03
 14c:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = snelheid - 25;
 14e:	95 83       	std	Z+5, r25	; 0x05
 150:	84 83       	std	Z+4, r24	; 0x04
			break;
 152:	08 95       	ret
			//Als de RP6 vooruit rijd willen we dat deze in snelheid mindert
			
			case 4:
			case 8:
			case 12:
				motor[0] = 12;
 154:	e2 e6       	ldi	r30, 0x62	; 98
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	8c e0       	ldi	r24, 0x0C	; 12
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	91 83       	std	Z+1, r25	; 0x01
 15e:	80 83       	st	Z, r24
				motor[1] = snelheid + 25;
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 164:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 168:	49 96       	adiw	r24, 0x19	; 25
 16a:	93 83       	std	Z+3, r25	; 0x03
 16c:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = snelheid + 25;
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04
			break;
 172:	08 95       	ret
			//Als de RP6 achteruit rijd of om zijn as draait willen we dat deze (meer) snelheid maakt
			}
		} else {
		motor[0] = 12;
 174:	e2 e6       	ldi	r30, 0x62	; 98
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	91 83       	std	Z+1, r25	; 0x01
 17e:	80 83       	st	Z, r24
		motor[1] = instelsnelheid;
 180:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <instelsnelheid>
 184:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <instelsnelheid+0x1>
 188:	93 83       	std	Z+3, r25	; 0x03
 18a:	82 83       	std	Z+2, r24	; 0x02
		motor[2] = instelsnelheid;
 18c:	95 83       	std	Z+5, r25	; 0x05
 18e:	84 83       	std	Z+4, r24	; 0x04
 190:	08 95       	ret

00000192 <links>:
	}
	return;
}

void links () {
	switch(motor[0]){
 192:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <motor>
 196:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <motor+0x1>
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	91 05       	cpc	r25, r1
 19e:	39 f1       	breq	.+78     	; 0x1ee <links+0x5c>
 1a0:	1c f4       	brge	.+6      	; 0x1a8 <links+0x16>
 1a2:	89 2b       	or	r24, r25
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <links+0x20>
 1a6:	08 95       	ret
 1a8:	88 30       	cpi	r24, 0x08	; 8
 1aa:	91 05       	cpc	r25, r1
 1ac:	01 f1       	breq	.+64     	; 0x1ee <links+0x5c>
 1ae:	0c 97       	sbiw	r24, 0x0c	; 12
 1b0:	51 f5       	brne	.+84     	; 0x206 <links+0x74>
		case 0:
		case 12:
		if (snelheid != 0) { 		//Als de RP6 aan het rijden is willen we dat deze een bocht maakt
 1b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	59 f0       	breq	.+22     	; 0x1d4 <links+0x42>
			motor[1] = snelheid - 25;
 1be:	e2 e6       	ldi	r30, 0x62	; 98
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	9c 01       	movw	r18, r24
 1c4:	29 51       	subi	r18, 0x19	; 25
 1c6:	31 09       	sbc	r19, r1
 1c8:	33 83       	std	Z+3, r19	; 0x03
 1ca:	22 83       	std	Z+2, r18	; 0x02
			motor[2] = snelheid + 25;
 1cc:	49 96       	adiw	r24, 0x19	; 25
 1ce:	95 83       	std	Z+5, r25	; 0x05
 1d0:	84 83       	std	Z+4, r24	; 0x04
 1d2:	08 95       	ret
			} else {
			motor[0] = 8;
 1d4:	e2 e6       	ldi	r30, 0x62	; 98
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	91 83       	std	Z+1, r25	; 0x01
 1de:	80 83       	st	Z, r24
			motor[1] = 50;
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	93 83       	std	Z+3, r25	; 0x03
 1e6:	82 83       	std	Z+2, r24	; 0x02
			motor[2] = 50;
 1e8:	95 83       	std	Z+5, r25	; 0x05
 1ea:	84 83       	std	Z+4, r24	; 0x04
 1ec:	08 95       	ret
		break;
		//Als de RP6 stilstaat willen we dat deze om zijn as draait
		
		case 4:
		case 8:
		motor[0] = 8;
 1ee:	e2 e6       	ldi	r30, 0x62	; 98
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
		motor[1] = 50;
 1fa:	82 e3       	ldi	r24, 0x32	; 50
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	93 83       	std	Z+3, r25	; 0x03
 200:	82 83       	std	Z+2, r24	; 0x02
		motor[2] = 50;
 202:	95 83       	std	Z+5, r25	; 0x05
 204:	84 83       	std	Z+4, r24	; 0x04
 206:	08 95       	ret

00000208 <rechts>:
		break;
		//In dit geval is de RP6 al om zijn as aan het draaien
	}
}
void rechts () { //Wordt aangeroepen als we willen dat de Arduino naar rechts gaat
	switch(motor[0]){
 208:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <motor>
 20c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <motor+0x1>
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	91 05       	cpc	r25, r1
 214:	39 f1       	breq	.+78     	; 0x264 <rechts+0x5c>
 216:	1c f4       	brge	.+6      	; 0x21e <rechts+0x16>
 218:	89 2b       	or	r24, r25
 21a:	31 f0       	breq	.+12     	; 0x228 <rechts+0x20>
 21c:	08 95       	ret
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	91 05       	cpc	r25, r1
 222:	01 f1       	breq	.+64     	; 0x264 <rechts+0x5c>
 224:	0c 97       	sbiw	r24, 0x0c	; 12
 226:	51 f5       	brne	.+84     	; 0x27c <rechts+0x74>
		case 0:
		case 12:
			if (snelheid != 0) { //Als de RP6 aan het rijden is willen we dat deze een bocht maakt
 228:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 22c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	59 f0       	breq	.+22     	; 0x24a <rechts+0x42>
				motor[1] = snelheid + 25;
 234:	e2 e6       	ldi	r30, 0x62	; 98
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	9c 01       	movw	r18, r24
 23a:	27 5e       	subi	r18, 0xE7	; 231
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	33 83       	std	Z+3, r19	; 0x03
 240:	22 83       	std	Z+2, r18	; 0x02
				motor[2] = snelheid - 25;
 242:	49 97       	sbiw	r24, 0x19	; 25
 244:	95 83       	std	Z+5, r25	; 0x05
 246:	84 83       	std	Z+4, r24	; 0x04
 248:	08 95       	ret
			} else {
				motor[0] = 4;
 24a:	e2 e6       	ldi	r30, 0x62	; 98
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24
				motor[1] = 50;
 256:	82 e3       	ldi	r24, 0x32	; 50
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	93 83       	std	Z+3, r25	; 0x03
 25c:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = 50;
 25e:	95 83       	std	Z+5, r25	; 0x05
 260:	84 83       	std	Z+4, r24	; 0x04
 262:	08 95       	ret
		break;
		//Als de RP6 stilstaat willen we dat deze om zijn as draait
		
		case 4:
		case 8:
			motor[0] = 4;
 264:	e2 e6       	ldi	r30, 0x62	; 98
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	91 83       	std	Z+1, r25	; 0x01
 26e:	80 83       	st	Z, r24
			motor[1] = 50;
 270:	82 e3       	ldi	r24, 0x32	; 50
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	93 83       	std	Z+3, r25	; 0x03
 276:	82 83       	std	Z+2, r24	; 0x02
			motor[2] = 50;
 278:	95 83       	std	Z+5, r25	; 0x05
 27a:	84 83       	std	Z+4, r24	; 0x04
 27c:	08 95       	ret

0000027e <stop>:
		//In dit geval is de RP6 al om zijn as aan het draaien
	}
}

void stop () { //Wordt aangeroepen als de RP6 compleet stil moet zijn
	motor[0] = 0;
 27e:	e2 e6       	ldi	r30, 0x62	; 98
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	11 82       	std	Z+1, r1	; 0x01
 284:	10 82       	st	Z, r1
	motor[1] = 0;
 286:	13 82       	std	Z+3, r1	; 0x03
 288:	12 82       	std	Z+2, r1	; 0x02
	motor[2] = 0;
 28a:	15 82       	std	Z+5, r1	; 0x05
 28c:	14 82       	std	Z+4, r1	; 0x04
 28e:	08 95       	ret

00000290 <main>:
//Prototypes voor de functies

int main(void)
{
	//TODO get value buttonpressed, longdistance, instelsnelheid
	if (knop >= 128) {
 290:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <knop>
 294:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <knop+0x1>
 298:	e0 38       	cpi	r30, 0x80	; 128
 29a:	f1 05       	cpc	r31, r1
 29c:	1c f0       	brlt	.+6      	; 0x2a4 <main+0x14>
		stop();
 29e:	0e 94 3f 01 	call	0x27e	; 0x27e <stop>
 2a2:	2f c0       	rjmp	.+94     	; 0x302 <main+0x72>
	} //Als de noodstop knop ingedrukt is moeten we deze direct uitvoeren
	else {
		switch (knop) {
 2a4:	eb 30       	cpi	r30, 0x0B	; 11
 2a6:	f1 05       	cpc	r31, r1
 2a8:	60 f5       	brcc	.+88     	; 0x302 <main+0x72>
 2aa:	e6 5d       	subi	r30, 0xD6	; 214
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__tablejump2__>
			case 0: //als we niks indrukken en we zijn niet met de instelsnelheid bezig, stop.
				if (langeafstand == 0) {
 2b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <langeafstand>
 2b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <langeafstand+0x1>
 2ba:	89 2b       	or	r24, r25
 2bc:	11 f5       	brne	.+68     	; 0x302 <main+0x72>
					stop();
 2be:	0e 94 3f 01 	call	0x27e	; 0x27e <stop>
 2c2:	1f c0       	rjmp	.+62     	; 0x302 <main+0x72>
				}
			break;

			case 1: //pijl naar boven
				rechtdoor();
 2c4:	0e 94 49 00 	call	0x92	; 0x92 <rechtdoor>
			break;
 2c8:	1c c0       	rjmp	.+56     	; 0x302 <main+0x72>
			
			case 2: //pijl naar onder
				achteruit();
 2ca:	0e 94 87 00 	call	0x10e	; 0x10e <achteruit>
			break;
 2ce:	19 c0       	rjmp	.+50     	; 0x302 <main+0x72>

			case 4: //pijl naar rechts
				rechts();
 2d0:	0e 94 04 01 	call	0x208	; 0x208 <rechts>
			break;
 2d4:	16 c0       	rjmp	.+44     	; 0x302 <main+0x72>

			case 5: //pijl naar boven & rechts
				rechtdoor();
 2d6:	0e 94 49 00 	call	0x92	; 0x92 <rechtdoor>
				rechts();
 2da:	0e 94 04 01 	call	0x208	; 0x208 <rechts>
			break;
 2de:	11 c0       	rjmp	.+34     	; 0x302 <main+0x72>

			case 6: //pijl naar onder & rechts
				achteruit();
 2e0:	0e 94 87 00 	call	0x10e	; 0x10e <achteruit>
				rechts();
 2e4:	0e 94 04 01 	call	0x208	; 0x208 <rechts>
			break;
 2e8:	0c c0       	rjmp	.+24     	; 0x302 <main+0x72>
			
			case 8://pijl naar links
				links();
 2ea:	0e 94 c9 00 	call	0x192	; 0x192 <links>
			break;
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <main+0x72>

			case 9: //pijl naar boven & links
				rechtdoor();
 2f0:	0e 94 49 00 	call	0x92	; 0x92 <rechtdoor>
				links();
 2f4:	0e 94 c9 00 	call	0x192	; 0x192 <links>
			break;
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <main+0x72>
			
			case 10: //pijl naar onder & links
				achteruit();
 2fa:	0e 94 87 00 	call	0x10e	; 0x10e <achteruit>
				links();
 2fe:	0e 94 c9 00 	call	0x192	; 0x192 <links>
			default:
			//TODO return error voor invalide combinatie.
			break;
		}//TODO correcte waardes toekennen
	}
	if (motor[1] < 0) {motor[1] = 0;}
 302:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <motor+0x2>
 306:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <motor+0x3>
 30a:	99 23       	and	r25, r25
 30c:	2c f4       	brge	.+10     	; 0x318 <main+0x88>
 30e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <motor+0x3>
 312:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <motor+0x2>
 316:	09 c0       	rjmp	.+18     	; 0x32a <main+0x9a>
	if (motor[1] > 250) {motor[1] = 250;}
 318:	8b 3f       	cpi	r24, 0xFB	; 251
 31a:	91 05       	cpc	r25, r1
 31c:	34 f0       	brlt	.+12     	; 0x32a <main+0x9a>
 31e:	8a ef       	ldi	r24, 0xFA	; 250
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <motor+0x3>
 326:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <motor+0x2>
	if (motor[2] < 0) {motor[2] = 0;}
 32a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <motor+0x4>
 32e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <motor+0x5>
 332:	99 23       	and	r25, r25
 334:	2c f4       	brge	.+10     	; 0x340 <main+0xb0>
 336:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <motor+0x5>
 33a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <motor+0x4>
 33e:	09 c0       	rjmp	.+18     	; 0x352 <main+0xc2>
	if (motor[2] > 250) {motor[2] = 250;}
 340:	8b 3f       	cpi	r24, 0xFB	; 251
 342:	91 05       	cpc	r25, r1
 344:	34 f0       	brlt	.+12     	; 0x352 <main+0xc2>
 346:	8a ef       	ldi	r24, 0xFA	; 250
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <motor+0x5>
 34e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <motor+0x4>
	//Onze snelheid mag niet meer dan 250 zijn, maar ook niet minder dan 0.
	switch(motor[0]) {
 352:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <motor>
 356:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <motor+0x1>
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	91 05       	cpc	r25, r1
 35e:	d9 f0       	breq	.+54     	; 0x396 <main+0x106>
 360:	1c f4       	brge	.+6      	; 0x368 <main+0xd8>
 362:	89 2b       	or	r24, r25
 364:	31 f0       	breq	.+12     	; 0x372 <main+0xe2>
 366:	1b c0       	rjmp	.+54     	; 0x39e <main+0x10e>
 368:	88 30       	cpi	r24, 0x08	; 8
 36a:	91 05       	cpc	r25, r1
 36c:	a1 f0       	breq	.+40     	; 0x396 <main+0x106>
 36e:	0c 97       	sbiw	r24, 0x0c	; 12
 370:	b1 f4       	brne	.+44     	; 0x39e <main+0x10e>
		case 0:
		case 12:
			snelheid = (motor[1] + motor[2]) / 2;
 372:	e2 e6       	ldi	r30, 0x62	; 98
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	22 81       	ldd	r18, Z+2	; 0x02
 378:	33 81       	ldd	r19, Z+3	; 0x03
 37a:	84 81       	ldd	r24, Z+4	; 0x04
 37c:	95 81       	ldd	r25, Z+5	; 0x05
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	99 23       	and	r25, r25
 384:	0c f4       	brge	.+2      	; 0x388 <main+0xf8>
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	95 95       	asr	r25
 38a:	87 95       	ror	r24
 38c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 390:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		break;
 394:	04 c0       	rjmp	.+8      	; 0x39e <main+0x10e>
		
		case 4:
		case 8:
			snelheid = 0;
 396:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 39a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		break;
	}
	//Hier slaan we de huidige snelheid op
}
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	08 95       	ret

000003a4 <__tablejump2__>:
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	05 90       	lpm	r0, Z+
 3aa:	f4 91       	lpm	r31, Z
 3ac:	e0 2d       	mov	r30, r0
 3ae:	09 94       	ijmp

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
