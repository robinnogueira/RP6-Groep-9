
Arduinocode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  0000046e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f4  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000547  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c9  00000000  00000000  00001167  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000335  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	5e 01       	movw	r10, r28
  56:	67 01       	movw	r12, r14
  58:	6a 01       	movw	r12, r20
  5a:	86 01       	movw	r16, r12
  5c:	6d 01       	movw	r12, r26
  5e:	70 01       	movw	r14, r0
  60:	75 01       	movw	r14, r10
  62:	86 01       	movw	r16, r12
  64:	7a 01       	movw	r14, r20
  66:	7d 01       	movw	r14, r26
  68:	82 01       	movw	r16, r4

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e8 ed       	ldi	r30, 0xD8	; 216
  7e:	f3 e0       	ldi	r31, 0x03	; 3
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a2 36       	cpi	r26, 0x62	; 98
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	a2 e6       	ldi	r26, 0x62	; 98
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 36       	cpi	r26, 0x6E	; 110
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  a0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <rechtdoor>:

//TODO doe iets met sensoren
//TODO pad planning implementeren

void rechtdoor () {
	if (langeafstand == 1) {
  a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  ac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	59 f5       	brne	.+86     	; 0x10a <rechtdoor+0x62>
		switch(motor[0]) {
  b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <motor>
  b8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <motor+0x1>
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	91 05       	cpc	r25, r1
  c0:	51 f0       	breq	.+20     	; 0xd6 <rechtdoor+0x2e>
  c2:	1c f4       	brge	.+6      	; 0xca <rechtdoor+0x22>
  c4:	89 2b       	or	r24, r25
  c6:	69 f5       	brne	.+90     	; 0x122 <rechtdoor+0x7a>
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <rechtdoor+0x2e>
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	91 05       	cpc	r25, r1
  ce:	19 f0       	breq	.+6      	; 0xd6 <rechtdoor+0x2e>
  d0:	0c 97       	sbiw	r24, 0x0c	; 12
  d2:	79 f0       	breq	.+30     	; 0xf2 <rechtdoor+0x4a>
  d4:	08 95       	ret
			case 0:
			case 4:
			case 8:
				motor[0] = 0;
  d6:	e4 e6       	ldi	r30, 0x64	; 100
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	11 82       	std	Z+1, r1	; 0x01
  dc:	10 82       	st	Z, r1
				motor[1] = snelheid + 25;
  de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  e6:	49 96       	adiw	r24, 0x19	; 25
  e8:	93 83       	std	Z+3, r25	; 0x03
  ea:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = snelheid + 25;
  ec:	95 83       	std	Z+5, r25	; 0x05
  ee:	84 83       	std	Z+4, r24	; 0x04
			break;
  f0:	08 95       	ret
			//Als de RP6 vooruit rijd of om zijn as draait willen we dat deze (meer) snelheid maakt
			
			case 12:
				motor[0] = 12;
				motor[1] = snelheid - 25;
  f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  f6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  fa:	49 97       	sbiw	r24, 0x19	; 25
  fc:	e4 e6       	ldi	r30, 0x64	; 100
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	93 83       	std	Z+3, r25	; 0x03
 102:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = snelheid - 25;
 104:	95 83       	std	Z+5, r25	; 0x05
 106:	84 83       	std	Z+4, r24	; 0x04
			break;
 108:	08 95       	ret
			//Als de RP6 achteruit rijd willen we dat deze in snelheid mindert
			}
		} else {
		motor[0] = 0;
 10a:	e4 e6       	ldi	r30, 0x64	; 100
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	11 82       	std	Z+1, r1	; 0x01
 110:	10 82       	st	Z, r1
		motor[1] = instelsnelheid;
 112:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <instelsnelheid>
 116:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <instelsnelheid+0x1>
 11a:	93 83       	std	Z+3, r25	; 0x03
 11c:	82 83       	std	Z+2, r24	; 0x02
		motor[2] = instelsnelheid;
 11e:	95 83       	std	Z+5, r25	; 0x05
 120:	84 83       	std	Z+4, r24	; 0x04
 122:	08 95       	ret

00000124 <achteruit>:
		//Als de RP6 in de andere mode zit willen we dat deze met de ingestelde snelheid naar achteren rijd
	}
	return;
}
void achteruit () {
	if (langeafstand == 1) {
 124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 128:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	69 f5       	brne	.+90     	; 0x18a <achteruit+0x66>
		switch(motor[0]) {
 130:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <motor>
 134:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <motor+0x1>
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	91 05       	cpc	r25, r1
 13c:	b1 f0       	breq	.+44     	; 0x16a <achteruit+0x46>
 13e:	1c f4       	brge	.+6      	; 0x146 <achteruit+0x22>
 140:	89 2b       	or	r24, r25
 142:	39 f0       	breq	.+14     	; 0x152 <achteruit+0x2e>
 144:	08 95       	ret
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	91 05       	cpc	r25, r1
 14a:	79 f0       	breq	.+30     	; 0x16a <achteruit+0x46>
 14c:	0c 97       	sbiw	r24, 0x0c	; 12
 14e:	59 f5       	brne	.+86     	; 0x1a6 <achteruit+0x82>
 150:	0c c0       	rjmp	.+24     	; 0x16a <achteruit+0x46>
			case 0:
				motor[0] = 0;
				motor[1] = snelheid - 25;
 152:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 156:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 15a:	49 97       	sbiw	r24, 0x19	; 25
 15c:	e4 e6       	ldi	r30, 0x64	; 100
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	93 83       	std	Z+3, r25	; 0x03
 162:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = snelheid - 25;
 164:	95 83       	std	Z+5, r25	; 0x05
 166:	84 83       	std	Z+4, r24	; 0x04
			break;
 168:	08 95       	ret
			//Als de RP6 vooruit rijd willen we dat deze in snelheid mindert
			
			case 4:
			case 8:
			case 12:
				motor[0] = 12;
 16a:	e4 e6       	ldi	r30, 0x64	; 100
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	91 83       	std	Z+1, r25	; 0x01
 174:	80 83       	st	Z, r24
				motor[1] = snelheid + 25;
 176:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 17a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 17e:	49 96       	adiw	r24, 0x19	; 25
 180:	93 83       	std	Z+3, r25	; 0x03
 182:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = snelheid + 25;
 184:	95 83       	std	Z+5, r25	; 0x05
 186:	84 83       	std	Z+4, r24	; 0x04
			break;
 188:	08 95       	ret
			//Als de RP6 achteruit rijd of om zijn as draait willen we dat deze (meer) snelheid maakt
			}
		} else {
		motor[0] = 12;
 18a:	e4 e6       	ldi	r30, 0x64	; 100
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
		motor[1] = instelsnelheid;
 196:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <instelsnelheid>
 19a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <instelsnelheid+0x1>
 19e:	93 83       	std	Z+3, r25	; 0x03
 1a0:	82 83       	std	Z+2, r24	; 0x02
		motor[2] = instelsnelheid;
 1a2:	95 83       	std	Z+5, r25	; 0x05
 1a4:	84 83       	std	Z+4, r24	; 0x04
 1a6:	08 95       	ret

000001a8 <links>:
	}
	return;
}

void links () {
	switch(motor[0]){
 1a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <motor>
 1ac:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <motor+0x1>
 1b0:	84 30       	cpi	r24, 0x04	; 4
 1b2:	91 05       	cpc	r25, r1
 1b4:	39 f1       	breq	.+78     	; 0x204 <links+0x5c>
 1b6:	1c f4       	brge	.+6      	; 0x1be <links+0x16>
 1b8:	89 2b       	or	r24, r25
 1ba:	31 f0       	breq	.+12     	; 0x1c8 <links+0x20>
 1bc:	08 95       	ret
 1be:	88 30       	cpi	r24, 0x08	; 8
 1c0:	91 05       	cpc	r25, r1
 1c2:	01 f1       	breq	.+64     	; 0x204 <links+0x5c>
 1c4:	0c 97       	sbiw	r24, 0x0c	; 12
 1c6:	51 f5       	brne	.+84     	; 0x21c <links+0x74>
		case 0:
		case 12:
		if (snelheid != 0) { 		//Als de RP6 aan het rijden is willen we dat deze een bocht maakt
 1c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1cc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	59 f0       	breq	.+22     	; 0x1ea <links+0x42>
			motor[1] = snelheid - 25;
 1d4:	e4 e6       	ldi	r30, 0x64	; 100
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	9c 01       	movw	r18, r24
 1da:	29 51       	subi	r18, 0x19	; 25
 1dc:	31 09       	sbc	r19, r1
 1de:	33 83       	std	Z+3, r19	; 0x03
 1e0:	22 83       	std	Z+2, r18	; 0x02
			motor[2] = snelheid + 25;
 1e2:	49 96       	adiw	r24, 0x19	; 25
 1e4:	95 83       	std	Z+5, r25	; 0x05
 1e6:	84 83       	std	Z+4, r24	; 0x04
 1e8:	08 95       	ret
			} else {
			motor[0] = 8;
 1ea:	e4 e6       	ldi	r30, 0x64	; 100
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	91 83       	std	Z+1, r25	; 0x01
 1f4:	80 83       	st	Z, r24
			motor[1] = 50;
 1f6:	82 e3       	ldi	r24, 0x32	; 50
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	93 83       	std	Z+3, r25	; 0x03
 1fc:	82 83       	std	Z+2, r24	; 0x02
			motor[2] = 50;
 1fe:	95 83       	std	Z+5, r25	; 0x05
 200:	84 83       	std	Z+4, r24	; 0x04
 202:	08 95       	ret
		break;
		//Als de RP6 stilstaat willen we dat deze om zijn as draait
		
		case 4:
		case 8:
		motor[0] = 8;
 204:	e4 e6       	ldi	r30, 0x64	; 100
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	91 83       	std	Z+1, r25	; 0x01
 20e:	80 83       	st	Z, r24
		motor[1] = 50;
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	93 83       	std	Z+3, r25	; 0x03
 216:	82 83       	std	Z+2, r24	; 0x02
		motor[2] = 50;
 218:	95 83       	std	Z+5, r25	; 0x05
 21a:	84 83       	std	Z+4, r24	; 0x04
 21c:	08 95       	ret

0000021e <rechts>:
		break;
		//In dit geval is de RP6 al om zijn as aan het draaien
	}
}
void rechts () { //Wordt aangeroepen als we willen dat de Arduino naar rechts gaat
	switch(motor[0]){
 21e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <motor>
 222:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <motor+0x1>
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	91 05       	cpc	r25, r1
 22a:	39 f1       	breq	.+78     	; 0x27a <rechts+0x5c>
 22c:	1c f4       	brge	.+6      	; 0x234 <rechts+0x16>
 22e:	89 2b       	or	r24, r25
 230:	31 f0       	breq	.+12     	; 0x23e <rechts+0x20>
 232:	08 95       	ret
 234:	88 30       	cpi	r24, 0x08	; 8
 236:	91 05       	cpc	r25, r1
 238:	01 f1       	breq	.+64     	; 0x27a <rechts+0x5c>
 23a:	0c 97       	sbiw	r24, 0x0c	; 12
 23c:	51 f5       	brne	.+84     	; 0x292 <rechts+0x74>
		case 0:
		case 12:
			if (snelheid != 0) { //Als de RP6 aan het rijden is willen we dat deze een bocht maakt
 23e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 242:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	59 f0       	breq	.+22     	; 0x260 <rechts+0x42>
				motor[1] = snelheid + 25;
 24a:	e4 e6       	ldi	r30, 0x64	; 100
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	9c 01       	movw	r18, r24
 250:	27 5e       	subi	r18, 0xE7	; 231
 252:	3f 4f       	sbci	r19, 0xFF	; 255
 254:	33 83       	std	Z+3, r19	; 0x03
 256:	22 83       	std	Z+2, r18	; 0x02
				motor[2] = snelheid - 25;
 258:	49 97       	sbiw	r24, 0x19	; 25
 25a:	95 83       	std	Z+5, r25	; 0x05
 25c:	84 83       	std	Z+4, r24	; 0x04
 25e:	08 95       	ret
			} else {
				motor[0] = 4;
 260:	e4 e6       	ldi	r30, 0x64	; 100
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	91 83       	std	Z+1, r25	; 0x01
 26a:	80 83       	st	Z, r24
				motor[1] = 50;
 26c:	82 e3       	ldi	r24, 0x32	; 50
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	93 83       	std	Z+3, r25	; 0x03
 272:	82 83       	std	Z+2, r24	; 0x02
				motor[2] = 50;
 274:	95 83       	std	Z+5, r25	; 0x05
 276:	84 83       	std	Z+4, r24	; 0x04
 278:	08 95       	ret
		break;
		//Als de RP6 stilstaat willen we dat deze om zijn as draait
		
		case 4:
		case 8:
			motor[0] = 4;
 27a:	e4 e6       	ldi	r30, 0x64	; 100
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	91 83       	std	Z+1, r25	; 0x01
 284:	80 83       	st	Z, r24
			motor[1] = 50;
 286:	82 e3       	ldi	r24, 0x32	; 50
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	93 83       	std	Z+3, r25	; 0x03
 28c:	82 83       	std	Z+2, r24	; 0x02
			motor[2] = 50;
 28e:	95 83       	std	Z+5, r25	; 0x05
 290:	84 83       	std	Z+4, r24	; 0x04
 292:	08 95       	ret

00000294 <stop>:
		//In dit geval is de RP6 al om zijn as aan het draaien
	}
}

void stop () { //Wordt aangeroepen als de RP6 compleet stil moet zijn
	motor[0] = 0;
 294:	e4 e6       	ldi	r30, 0x64	; 100
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	11 82       	std	Z+1, r1	; 0x01
 29a:	10 82       	st	Z, r1
	motor[1] = 0;
 29c:	13 82       	std	Z+3, r1	; 0x03
 29e:	12 82       	std	Z+2, r1	; 0x02
	motor[2] = 0;
 2a0:	15 82       	std	Z+5, r1	; 0x05
 2a2:	14 82       	std	Z+4, r1	; 0x04
 2a4:	08 95       	ret

000002a6 <doStuff>:
}

void doStuff() {
	switch (knop) {
 2a6:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <knop>
 2aa:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <knop+0x1>
 2ae:	eb 30       	cpi	r30, 0x0B	; 11
 2b0:	f1 05       	cpc	r31, r1
 2b2:	60 f5       	brcc	.+88     	; 0x30c <doStuff+0x66>
 2b4:	e6 5d       	subi	r30, 0xD6	; 214
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__tablejump2__>
		case 0: //als we niks indrukken en we zijn niet met de instelsnelheid bezig, stop.
		if (langeafstand == 0) {
 2bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2c0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 2c4:	89 2b       	or	r24, r25
 2c6:	11 f5       	brne	.+68     	; 0x30c <doStuff+0x66>
			stop();
 2c8:	0e 94 4a 01 	call	0x294	; 0x294 <stop>
 2cc:	08 95       	ret
		}
		break;

		case 1: //pijl naar boven
		rechtdoor();
 2ce:	0e 94 54 00 	call	0xa8	; 0xa8 <rechtdoor>
		break;
 2d2:	08 95       	ret
		
		case 2: //pijl naar onder
		achteruit();
 2d4:	0e 94 92 00 	call	0x124	; 0x124 <achteruit>
		break;
 2d8:	08 95       	ret

		case 4: //pijl naar rechts
		rechts();
 2da:	0e 94 0f 01 	call	0x21e	; 0x21e <rechts>
		break;
 2de:	08 95       	ret

		case 5: //pijl naar boven & rechts
		rechtdoor();
 2e0:	0e 94 54 00 	call	0xa8	; 0xa8 <rechtdoor>
		rechts();
 2e4:	0e 94 0f 01 	call	0x21e	; 0x21e <rechts>
		break;
 2e8:	08 95       	ret

		case 6: //pijl naar onder & rechts
		achteruit();
 2ea:	0e 94 92 00 	call	0x124	; 0x124 <achteruit>
		rechts();
 2ee:	0e 94 0f 01 	call	0x21e	; 0x21e <rechts>
		break;
 2f2:	08 95       	ret
		
		case 8://pijl naar links
		links();
 2f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <links>
		break;
 2f8:	08 95       	ret

		case 9: //pijl naar boven & links
		rechtdoor();
 2fa:	0e 94 54 00 	call	0xa8	; 0xa8 <rechtdoor>
		links();
 2fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <links>
		break;
 302:	08 95       	ret
		
		case 10: //pijl naar onder & links
		achteruit();
 304:	0e 94 92 00 	call	0x124	; 0x124 <achteruit>
		links();
 308:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <links>
 30c:	08 95       	ret

0000030e <main>:
//Prototypes voor de functies

int main(void)
{
	//TODO get value buttonpressed, longdistance, instelsnelheid
	if (knop >= 128) {
 30e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <knop>
 312:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <knop+0x1>
 316:	80 38       	cpi	r24, 0x80	; 128
 318:	91 05       	cpc	r25, r1
 31a:	1c f0       	brlt	.+6      	; 0x322 <main+0x14>
		stop();
 31c:	0e 94 4a 01 	call	0x294	; 0x294 <stop>
 320:	02 c0       	rjmp	.+4      	; 0x326 <main+0x18>
	} //Als de noodstop knop ingedrukt is moeten we deze direct uitvoeren
	else {
		doStuff();
 322:	0e 94 53 01 	call	0x2a6	; 0x2a6 <doStuff>
	}
	if (motor[1] < 0) {motor[1] = 0;}
 326:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <motor+0x2>
 32a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <motor+0x3>
 32e:	99 23       	and	r25, r25
 330:	2c f4       	brge	.+10     	; 0x33c <main+0x2e>
 332:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <motor+0x3>
 336:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <motor+0x2>
 33a:	09 c0       	rjmp	.+18     	; 0x34e <main+0x40>
	if (motor[1] > 250) {motor[1] = 250;}
 33c:	8b 3f       	cpi	r24, 0xFB	; 251
 33e:	91 05       	cpc	r25, r1
 340:	34 f0       	brlt	.+12     	; 0x34e <main+0x40>
 342:	8a ef       	ldi	r24, 0xFA	; 250
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <motor+0x3>
 34a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <motor+0x2>
	if (motor[2] < 0) {motor[2] = 0;}
 34e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <motor+0x4>
 352:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <motor+0x5>
 356:	99 23       	and	r25, r25
 358:	2c f4       	brge	.+10     	; 0x364 <main+0x56>
 35a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <motor+0x5>
 35e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <motor+0x4>
 362:	09 c0       	rjmp	.+18     	; 0x376 <main+0x68>
	if (motor[2] > 250) {motor[2] = 250;}
 364:	8b 3f       	cpi	r24, 0xFB	; 251
 366:	91 05       	cpc	r25, r1
 368:	34 f0       	brlt	.+12     	; 0x376 <main+0x68>
 36a:	8a ef       	ldi	r24, 0xFA	; 250
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <motor+0x5>
 372:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <motor+0x4>
	//Onze snelheid mag niet meer dan 250 zijn, maar ook niet minder dan 0.
	switch(motor[0]) {
 376:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <motor>
 37a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <motor+0x1>
 37e:	84 30       	cpi	r24, 0x04	; 4
 380:	91 05       	cpc	r25, r1
 382:	d9 f0       	breq	.+54     	; 0x3ba <main+0xac>
 384:	1c f4       	brge	.+6      	; 0x38c <main+0x7e>
 386:	89 2b       	or	r24, r25
 388:	31 f0       	breq	.+12     	; 0x396 <main+0x88>
 38a:	1b c0       	rjmp	.+54     	; 0x3c2 <main+0xb4>
 38c:	88 30       	cpi	r24, 0x08	; 8
 38e:	91 05       	cpc	r25, r1
 390:	a1 f0       	breq	.+40     	; 0x3ba <main+0xac>
 392:	0c 97       	sbiw	r24, 0x0c	; 12
 394:	b1 f4       	brne	.+44     	; 0x3c2 <main+0xb4>
		case 0:
		case 12:
			snelheid = (motor[1] + motor[2]) / 2;
 396:	e4 e6       	ldi	r30, 0x64	; 100
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	22 81       	ldd	r18, Z+2	; 0x02
 39c:	33 81       	ldd	r19, Z+3	; 0x03
 39e:	84 81       	ldd	r24, Z+4	; 0x04
 3a0:	95 81       	ldd	r25, Z+5	; 0x05
 3a2:	82 0f       	add	r24, r18
 3a4:	93 1f       	adc	r25, r19
 3a6:	99 23       	and	r25, r25
 3a8:	0c f4       	brge	.+2      	; 0x3ac <main+0x9e>
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	95 95       	asr	r25
 3ae:	87 95       	ror	r24
 3b0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 3b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		break;
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <main+0xb4>
		
		case 4:
		case 8:
			snelheid = 0;
 3ba:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 3be:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		break;
	}
	//Hier slaan we de huidige snelheid op
}
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	08 95       	ret

000003c8 <__tablejump2__>:
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	05 90       	lpm	r0, Z+
 3ce:	f4 91       	lpm	r31, Z
 3d0:	e0 2d       	mov	r30, r0
 3d2:	09 94       	ijmp

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
