
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a23  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c5  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000365  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000444  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000181  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <readInt>:
	}
	return (0);
}

int readInt() {
	int a = UDR0;
  84:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  88:	30 e0       	ldi	r19, 0x00	; 0
	a = a - 48;
  8a:	c9 01       	movw	r24, r18
  8c:	c0 97       	sbiw	r24, 0x30	; 48
	PORTB = 0x00;
  8e:	15 b8       	out	0x05, r1	; 5
	if (a>=8) {
  90:	88 30       	cpi	r24, 0x08	; 8
  92:	91 05       	cpc	r25, r1
  94:	14 f0       	brlt	.+4      	; 0x9a <readInt+0x16>
		PORTB = PORTB | 0x08;
  96:	2b 9a       	sbi	0x05, 3	; 5
		a = a - 8;
  98:	08 97       	sbiw	r24, 0x08	; 8
	}
	if (a>=4) {
  9a:	84 30       	cpi	r24, 0x04	; 4
  9c:	91 05       	cpc	r25, r1
  9e:	14 f0       	brlt	.+4      	; 0xa4 <readInt+0x20>
		PORTB = PORTB | 0x04;
  a0:	2a 9a       	sbi	0x05, 2	; 5
		a = a - 4;
  a2:	04 97       	sbiw	r24, 0x04	; 4
	}
	if (a>=2) { 
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	91 05       	cpc	r25, r1
  a8:	14 f0       	brlt	.+4      	; 0xae <readInt+0x2a>
		PORTB = PORTB | 0x02;
  aa:	29 9a       	sbi	0x05, 1	; 5
		a = a - 2;
  ac:	02 97       	sbiw	r24, 0x02	; 2
	}
	if (a==1) {
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	91 05       	cpc	r25, r1
  b2:	09 f4       	brne	.+2      	; 0xb6 <readInt+0x32>
		PORTB = PORTB | 0x01;
  b4:	28 9a       	sbi	0x05, 0	; 5
	}
	return a;
}
  b6:	08 95       	ret

000000b8 <main>:
void writeString(char st[]);
void writeInt(int i);

int main(void) {

	UCSR0A = 0;
  b8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = (1 << RXEN0); // Enable de USART Transmitter
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0H = 00;
  c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103; //baudrade 9600 bij
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	DDRB = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 b9       	out	0x04, r24	; 4
	while(1) {
		int x = readInt();
  d6:	0e 94 42 00 	call	0x84	; 0x84 <readInt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	84 e3       	ldi	r24, 0x34	; 52
  de:	9c e0       	ldi	r25, 0x0C	; 12
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x28>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x32>
  ea:	00 00       	nop
  ec:	f4 cf       	rjmp	.-24     	; 0xd6 <main+0x1e>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
