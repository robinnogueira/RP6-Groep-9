
Arduinocode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000488  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800214  00800214  00000530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fcc  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0f  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000708  00000000  00000000  000022fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063b  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000208  00000000  00000000  00003143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000334b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	99 c0       	rjmp	.+306    	; 0x138 <__bad_interrupt>
   6:	00 00       	nop
   8:	97 c0       	rjmp	.+302    	; 0x138 <__bad_interrupt>
   a:	00 00       	nop
   c:	95 c0       	rjmp	.+298    	; 0x138 <__bad_interrupt>
   e:	00 00       	nop
  10:	93 c0       	rjmp	.+294    	; 0x138 <__bad_interrupt>
  12:	00 00       	nop
  14:	91 c0       	rjmp	.+290    	; 0x138 <__bad_interrupt>
  16:	00 00       	nop
  18:	8f c0       	rjmp	.+286    	; 0x138 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8d c0       	rjmp	.+282    	; 0x138 <__bad_interrupt>
  1e:	00 00       	nop
  20:	8b c0       	rjmp	.+278    	; 0x138 <__bad_interrupt>
  22:	00 00       	nop
  24:	89 c0       	rjmp	.+274    	; 0x138 <__bad_interrupt>
  26:	00 00       	nop
  28:	87 c0       	rjmp	.+270    	; 0x138 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	85 c0       	rjmp	.+266    	; 0x138 <__bad_interrupt>
  2e:	00 00       	nop
  30:	83 c0       	rjmp	.+262    	; 0x138 <__bad_interrupt>
  32:	00 00       	nop
  34:	81 c0       	rjmp	.+258    	; 0x138 <__bad_interrupt>
  36:	00 00       	nop
  38:	7f c0       	rjmp	.+254    	; 0x138 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7d c0       	rjmp	.+250    	; 0x138 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7b c0       	rjmp	.+246    	; 0x138 <__bad_interrupt>
  42:	00 00       	nop
  44:	79 c0       	rjmp	.+242    	; 0x138 <__bad_interrupt>
  46:	00 00       	nop
  48:	77 c0       	rjmp	.+238    	; 0x138 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	75 c0       	rjmp	.+234    	; 0x138 <__bad_interrupt>
  4e:	00 00       	nop
  50:	73 c0       	rjmp	.+230    	; 0x138 <__bad_interrupt>
  52:	00 00       	nop
  54:	71 c0       	rjmp	.+226    	; 0x138 <__bad_interrupt>
  56:	00 00       	nop
  58:	6f c0       	rjmp	.+222    	; 0x138 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6d c0       	rjmp	.+218    	; 0x138 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6b c0       	rjmp	.+214    	; 0x138 <__bad_interrupt>
  62:	00 00       	nop
  64:	69 c0       	rjmp	.+210    	; 0x138 <__bad_interrupt>
  66:	00 00       	nop
  68:	67 c0       	rjmp	.+206    	; 0x138 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	65 c0       	rjmp	.+202    	; 0x138 <__bad_interrupt>
  6e:	00 00       	nop
  70:	63 c0       	rjmp	.+198    	; 0x138 <__bad_interrupt>
  72:	00 00       	nop
  74:	61 c0       	rjmp	.+194    	; 0x138 <__bad_interrupt>
  76:	00 00       	nop
  78:	5f c0       	rjmp	.+190    	; 0x138 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5d c0       	rjmp	.+186    	; 0x138 <__bad_interrupt>
  7e:	00 00       	nop
  80:	5b c0       	rjmp	.+182    	; 0x138 <__bad_interrupt>
  82:	00 00       	nop
  84:	59 c0       	rjmp	.+178    	; 0x138 <__bad_interrupt>
  86:	00 00       	nop
  88:	57 c0       	rjmp	.+174    	; 0x138 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	55 c0       	rjmp	.+170    	; 0x138 <__bad_interrupt>
  8e:	00 00       	nop
  90:	53 c0       	rjmp	.+166    	; 0x138 <__bad_interrupt>
  92:	00 00       	nop
  94:	51 c0       	rjmp	.+162    	; 0x138 <__bad_interrupt>
  96:	00 00       	nop
  98:	4f c0       	rjmp	.+158    	; 0x138 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4d c0       	rjmp	.+154    	; 0x138 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	4b c0       	rjmp	.+150    	; 0x138 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	49 c0       	rjmp	.+146    	; 0x138 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	47 c0       	rjmp	.+142    	; 0x138 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	45 c0       	rjmp	.+138    	; 0x138 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	43 c0       	rjmp	.+134    	; 0x138 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	41 c0       	rjmp	.+130    	; 0x138 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3f c0       	rjmp	.+126    	; 0x138 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3d c0       	rjmp	.+122    	; 0x138 <__bad_interrupt>
  be:	00 00       	nop
  c0:	3b c0       	rjmp	.+118    	; 0x138 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	39 c0       	rjmp	.+114    	; 0x138 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	37 c0       	rjmp	.+110    	; 0x138 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	35 c0       	rjmp	.+106    	; 0x138 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	33 c0       	rjmp	.+102    	; 0x138 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	31 c0       	rjmp	.+98     	; 0x138 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2f c0       	rjmp	.+94     	; 0x138 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2d c0       	rjmp	.+90     	; 0x138 <__bad_interrupt>
  de:	00 00       	nop
  e0:	2b c0       	rjmp	.+86     	; 0x138 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	60 01       	movw	r12, r0
  e6:	68 01       	movw	r12, r16
  e8:	6a 01       	movw	r12, r20
  ea:	7b 01       	movw	r14, r22
  ec:	6c 01       	movw	r12, r24
  ee:	6e 01       	movw	r12, r28
  f0:	71 01       	movw	r14, r2
  f2:	7b 01       	movw	r14, r22
  f4:	74 01       	movw	r14, r8
  f6:	76 01       	movw	r14, r12
  f8:	79 01       	movw	r14, r18

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_copy_data>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	e8 e8       	ldi	r30, 0x88	; 136
 112:	f4 e0       	ldi	r31, 0x04	; 4
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	0b bf       	out	0x3b, r16	; 59
 118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x14>
 11a:	07 90       	elpm	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	a4 31       	cpi	r26, 0x14	; 20
 120:	b1 07       	cpc	r27, r17
 122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0x10>

00000124 <__do_clear_bss>:
 124:	22 e0       	ldi	r18, 0x02	; 2
 126:	a4 e1       	ldi	r26, 0x14	; 20
 128:	b2 e0       	ldi	r27, 0x02	; 2
 12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
 12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
 12e:	ad 31       	cpi	r26, 0x1D	; 29
 130:	b2 07       	cpc	r27, r18
 132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>
 134:	61 d1       	rcall	.+706    	; 0x3f8 <main>
 136:	a6 c1       	rjmp	.+844    	; 0x484 <_exit>

00000138 <__bad_interrupt>:
 138:	63 cf       	rjmp	.-314    	; 0x0 <__vectors>

0000013a <rechtdoor>:

//TODO doe iets met sensoren
//TODO pad planning implementeren

void rechtdoor () {
	if (langeafstand == 1) {
 13a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 13e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	01 f5       	brne	.+64     	; 0x186 <rechtdoor+0x4c>
		switch(motor[0]) {
 146:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <motor>
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	49 f0       	breq	.+18     	; 0x160 <rechtdoor+0x26>
 14e:	18 f4       	brcc	.+6      	; 0x156 <rechtdoor+0x1c>
 150:	81 11       	cpse	r24, r1
 152:	20 c0       	rjmp	.+64     	; 0x194 <rechtdoor+0x5a>
 154:	05 c0       	rjmp	.+10     	; 0x160 <rechtdoor+0x26>
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	19 f0       	breq	.+6      	; 0x160 <rechtdoor+0x26>
 15a:	8c 30       	cpi	r24, 0x0C	; 12
 15c:	51 f0       	breq	.+20     	; 0x172 <rechtdoor+0x38>
 15e:	08 95       	ret
			case 0:
			case 4:
			case 8:
				motor[0] = 0;
 160:	e6 e1       	ldi	r30, 0x16	; 22
 162:	f2 e0       	ldi	r31, 0x02	; 2
 164:	10 82       	st	Z, r1
				motor[1] = snelheid + 25;
 166:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 16a:	87 5e       	subi	r24, 0xE7	; 231
 16c:	81 83       	std	Z+1, r24	; 0x01
				motor[2] = snelheid + 25;
 16e:	82 83       	std	Z+2, r24	; 0x02
			break;
 170:	08 95       	ret
			//Als de RP6 vooruit rijd of om zijn as draait willen we dat deze (meer) snelheid maakt
			
			case 12:
				motor[0] = 12;
 172:	e6 e1       	ldi	r30, 0x16	; 22
 174:	f2 e0       	ldi	r31, 0x02	; 2
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	80 83       	st	Z, r24
				motor[1] = snelheid - 25;
 17a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 17e:	89 51       	subi	r24, 0x19	; 25
 180:	81 83       	std	Z+1, r24	; 0x01
				motor[2] = snelheid - 25;
 182:	82 83       	std	Z+2, r24	; 0x02
			break;
 184:	08 95       	ret
			//Als de RP6 achteruit rijd willen we dat deze in snelheid mindert
			}
		} else {
		motor[0] = 0;
 186:	e6 e1       	ldi	r30, 0x16	; 22
 188:	f2 e0       	ldi	r31, 0x02	; 2
 18a:	10 82       	st	Z, r1
		motor[1] = instelsnelheid;
 18c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <instelsnelheid>
 190:	81 83       	std	Z+1, r24	; 0x01
		motor[2] = instelsnelheid;
 192:	82 83       	std	Z+2, r24	; 0x02
 194:	08 95       	ret

00000196 <achteruit>:
		//Als de RP6 in de andere mode zit willen we dat deze met de ingestelde snelheid naar achteren rijd
	}
	return;
}
void achteruit () {
	if (langeafstand == 1) {
 196:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 19a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	01 f5       	brne	.+64     	; 0x1e2 <achteruit+0x4c>
		switch(motor[0]) {
 1a2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <motor>
 1a6:	84 30       	cpi	r24, 0x04	; 4
 1a8:	91 f0       	breq	.+36     	; 0x1ce <achteruit+0x38>
 1aa:	18 f4       	brcc	.+6      	; 0x1b2 <achteruit+0x1c>
 1ac:	88 23       	and	r24, r24
 1ae:	31 f0       	breq	.+12     	; 0x1bc <achteruit+0x26>
 1b0:	08 95       	ret
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	61 f0       	breq	.+24     	; 0x1ce <achteruit+0x38>
 1b6:	8c 30       	cpi	r24, 0x0C	; 12
 1b8:	e1 f4       	brne	.+56     	; 0x1f2 <achteruit+0x5c>
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <achteruit+0x38>
			case 0:
				motor[0] = 0;
 1bc:	e6 e1       	ldi	r30, 0x16	; 22
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	10 82       	st	Z, r1
				motor[1] = snelheid - 25;
 1c2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 1c6:	89 51       	subi	r24, 0x19	; 25
 1c8:	81 83       	std	Z+1, r24	; 0x01
				motor[2] = snelheid - 25;
 1ca:	82 83       	std	Z+2, r24	; 0x02
			break;
 1cc:	08 95       	ret
			//Als de RP6 vooruit rijd willen we dat deze in snelheid mindert
			
			case 4:
			case 8:
			case 12:
				motor[0] = 12;
 1ce:	e6 e1       	ldi	r30, 0x16	; 22
 1d0:	f2 e0       	ldi	r31, 0x02	; 2
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	80 83       	st	Z, r24
				motor[1] = snelheid + 25;
 1d6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 1da:	87 5e       	subi	r24, 0xE7	; 231
 1dc:	81 83       	std	Z+1, r24	; 0x01
				motor[2] = snelheid + 25;
 1de:	82 83       	std	Z+2, r24	; 0x02
			break;
 1e0:	08 95       	ret
			//Als de RP6 achteruit rijd of om zijn as draait willen we dat deze (meer) snelheid maakt
			}
		} else {
		motor[0] = 12;
 1e2:	e6 e1       	ldi	r30, 0x16	; 22
 1e4:	f2 e0       	ldi	r31, 0x02	; 2
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	80 83       	st	Z, r24
		motor[1] = instelsnelheid;
 1ea:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <instelsnelheid>
 1ee:	81 83       	std	Z+1, r24	; 0x01
		motor[2] = instelsnelheid;
 1f0:	82 83       	std	Z+2, r24	; 0x02
 1f2:	08 95       	ret

000001f4 <links>:
	}
	return;
}

void links () {
	switch(motor[0]){
 1f4:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <motor>
 1f8:	84 30       	cpi	r24, 0x04	; 4
 1fa:	f1 f0       	breq	.+60     	; 0x238 <links+0x44>
 1fc:	18 f4       	brcc	.+6      	; 0x204 <links+0x10>
 1fe:	88 23       	and	r24, r24
 200:	29 f0       	breq	.+10     	; 0x20c <links+0x18>
 202:	08 95       	ret
 204:	88 30       	cpi	r24, 0x08	; 8
 206:	c1 f0       	breq	.+48     	; 0x238 <links+0x44>
 208:	8c 30       	cpi	r24, 0x0C	; 12
 20a:	e9 f4       	brne	.+58     	; 0x246 <links+0x52>
		case 0:
		case 12:
		if (snelheid != 0) { 		//Als de RP6 aan het rijden is willen we dat deze een bocht maakt
 20c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 210:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	41 f0       	breq	.+16     	; 0x228 <links+0x34>
			motor[1] = snelheid - 25;
 218:	e6 e1       	ldi	r30, 0x16	; 22
 21a:	f2 e0       	ldi	r31, 0x02	; 2
 21c:	97 ee       	ldi	r25, 0xE7	; 231
 21e:	98 0f       	add	r25, r24
 220:	91 83       	std	Z+1, r25	; 0x01
			motor[2] = snelheid + 25;
 222:	87 5e       	subi	r24, 0xE7	; 231
 224:	82 83       	std	Z+2, r24	; 0x02
 226:	08 95       	ret
			} else {
			motor[0] = 8;
 228:	e6 e1       	ldi	r30, 0x16	; 22
 22a:	f2 e0       	ldi	r31, 0x02	; 2
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	80 83       	st	Z, r24
			motor[1] = 50;
 230:	82 e3       	ldi	r24, 0x32	; 50
 232:	81 83       	std	Z+1, r24	; 0x01
			motor[2] = 50;
 234:	82 83       	std	Z+2, r24	; 0x02
 236:	08 95       	ret
		break;
		//Als de RP6 stilstaat willen we dat deze om zijn as draait
		
		case 4:
		case 8:
		motor[0] = 8;
 238:	e6 e1       	ldi	r30, 0x16	; 22
 23a:	f2 e0       	ldi	r31, 0x02	; 2
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	80 83       	st	Z, r24
		motor[1] = 50;
 240:	82 e3       	ldi	r24, 0x32	; 50
 242:	81 83       	std	Z+1, r24	; 0x01
		motor[2] = 50;
 244:	82 83       	std	Z+2, r24	; 0x02
 246:	08 95       	ret

00000248 <rechts>:
		break;
		//In dit geval is de RP6 al om zijn as aan het draaien
	}
}
void rechts () { //Wordt aangeroepen als we willen dat de Arduino naar rechts gaat
	switch(motor[0]){
 248:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <motor>
 24c:	84 30       	cpi	r24, 0x04	; 4
 24e:	f1 f0       	breq	.+60     	; 0x28c <rechts+0x44>
 250:	18 f4       	brcc	.+6      	; 0x258 <rechts+0x10>
 252:	88 23       	and	r24, r24
 254:	29 f0       	breq	.+10     	; 0x260 <rechts+0x18>
 256:	08 95       	ret
 258:	88 30       	cpi	r24, 0x08	; 8
 25a:	c1 f0       	breq	.+48     	; 0x28c <rechts+0x44>
 25c:	8c 30       	cpi	r24, 0x0C	; 12
 25e:	e9 f4       	brne	.+58     	; 0x29a <rechts+0x52>
		case 0:
		case 12:
			if (snelheid != 0) { //Als de RP6 aan het rijden is willen we dat deze een bocht maakt
 260:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 264:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	41 f0       	breq	.+16     	; 0x27c <rechts+0x34>
				motor[1] = snelheid + 25;
 26c:	e6 e1       	ldi	r30, 0x16	; 22
 26e:	f2 e0       	ldi	r31, 0x02	; 2
 270:	99 e1       	ldi	r25, 0x19	; 25
 272:	98 0f       	add	r25, r24
 274:	91 83       	std	Z+1, r25	; 0x01
				motor[2] = snelheid - 25;
 276:	89 51       	subi	r24, 0x19	; 25
 278:	82 83       	std	Z+2, r24	; 0x02
 27a:	08 95       	ret
			} else {
				motor[0] = 4;
 27c:	e6 e1       	ldi	r30, 0x16	; 22
 27e:	f2 e0       	ldi	r31, 0x02	; 2
 280:	84 e0       	ldi	r24, 0x04	; 4
 282:	80 83       	st	Z, r24
				motor[1] = 50;
 284:	82 e3       	ldi	r24, 0x32	; 50
 286:	81 83       	std	Z+1, r24	; 0x01
				motor[2] = 50;
 288:	82 83       	std	Z+2, r24	; 0x02
 28a:	08 95       	ret
		break;
		//Als de RP6 stilstaat willen we dat deze om zijn as draait
		
		case 4:
		case 8:
			motor[0] = 4;
 28c:	e6 e1       	ldi	r30, 0x16	; 22
 28e:	f2 e0       	ldi	r31, 0x02	; 2
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	80 83       	st	Z, r24
			motor[1] = 50;
 294:	82 e3       	ldi	r24, 0x32	; 50
 296:	81 83       	std	Z+1, r24	; 0x01
			motor[2] = 50;
 298:	82 83       	std	Z+2, r24	; 0x02
 29a:	08 95       	ret

0000029c <stop>:
		//In dit geval is de RP6 al om zijn as aan het draaien
	}
}

void stop () { //Wordt aangeroepen als de RP6 compleet stil moet zijn
	motor[0] = 0;
 29c:	e6 e1       	ldi	r30, 0x16	; 22
 29e:	f2 e0       	ldi	r31, 0x02	; 2
 2a0:	10 82       	st	Z, r1
	motor[1] = 0;
 2a2:	11 82       	std	Z+1, r1	; 0x01
	motor[2] = 0;
 2a4:	12 82       	std	Z+2, r1	; 0x02
 2a6:	08 95       	ret

000002a8 <doStuff>:
}

void doStuff() {
	switch (knop) {
 2a8:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <knop>
 2ac:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <knop+0x1>
 2b0:	eb 30       	cpi	r30, 0x0B	; 11
 2b2:	f1 05       	cpc	r31, r1
 2b4:	00 f5       	brcc	.+64     	; 0x2f6 <doStuff+0x4e>
 2b6:	88 27       	eor	r24, r24
 2b8:	ee 58       	subi	r30, 0x8E	; 142
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	da c0       	rjmp	.+436    	; 0x474 <__tablejump2__>
		case 0: //als we niks indrukken en we zijn niet met de instelsnelheid bezig, stop.
		if (langeafstand == 0) {
 2c0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2c4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 2c8:	89 2b       	or	r24, r25
 2ca:	a9 f4       	brne	.+42     	; 0x2f6 <doStuff+0x4e>
			stop();
 2cc:	e7 cf       	rjmp	.-50     	; 0x29c <stop>
 2ce:	08 95       	ret
		}
		break;

		case 1: //pijl naar boven
		rechtdoor();
 2d0:	34 cf       	rjmp	.-408    	; 0x13a <rechtdoor>
		break;
 2d2:	08 95       	ret
		
		case 2: //pijl naar onder
		achteruit();
 2d4:	60 cf       	rjmp	.-320    	; 0x196 <achteruit>
		break;
 2d6:	08 95       	ret

		case 4: //pijl naar rechts
		rechts();
 2d8:	b7 cf       	rjmp	.-146    	; 0x248 <rechts>
		break;
 2da:	08 95       	ret

		case 5: //pijl naar boven & rechts
		rechtdoor();
 2dc:	2e df       	rcall	.-420    	; 0x13a <rechtdoor>
		rechts();
 2de:	b4 cf       	rjmp	.-152    	; 0x248 <rechts>
		break;
 2e0:	08 95       	ret

		case 6: //pijl naar onder & rechts
		achteruit();
 2e2:	59 df       	rcall	.-334    	; 0x196 <achteruit>
		rechts();
 2e4:	b1 cf       	rjmp	.-158    	; 0x248 <rechts>
		break;
 2e6:	08 95       	ret
		
		case 8://pijl naar links
		links();
 2e8:	85 cf       	rjmp	.-246    	; 0x1f4 <links>
		break;
 2ea:	08 95       	ret

		case 9: //pijl naar boven & links
		rechtdoor();
 2ec:	26 df       	rcall	.-436    	; 0x13a <rechtdoor>
		links();
 2ee:	82 cf       	rjmp	.-252    	; 0x1f4 <links>
		break;
 2f0:	08 95       	ret
		
		case 10: //pijl naar onder & links
		achteruit();
 2f2:	51 df       	rcall	.-350    	; 0x196 <achteruit>
		links();
 2f4:	7f cf       	rjmp	.-258    	; 0x1f4 <links>
 2f6:	08 95       	ret

000002f8 <writeChar>:
	return x;
}

void writeChar(char ch)
{
	while (!(UCSR0A & (1<<UDRE0)));
 2f8:	e0 ec       	ldi	r30, 0xC0	; 192
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	90 81       	ld	r25, Z
 2fe:	95 ff       	sbrs	r25, 5
 300:	fd cf       	rjmp	.-6      	; 0x2fc <writeChar+0x4>
	UDR0 = (uint8_t)ch;
 302:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 306:	08 95       	ret

00000308 <uart_getchar>:
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
	writeString("usart werkt nog\n\r");
}

char uart_getchar(void) {
 308:	cf 93       	push	r28
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 30a:	e0 ec       	ldi	r30, 0xC0	; 192
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 23       	and	r24, r24
 312:	ec f7       	brge	.-6      	; 0x30e <uart_getchar+0x6>
	char x = UDR0;
 314:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	writeChar(x);
 318:	8c 2f       	mov	r24, r28
 31a:	ee df       	rcall	.-36     	; 0x2f8 <writeChar>
	return x;
}
 31c:	8c 2f       	mov	r24, r28
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <writeString>:
	while (!(UCSR0A & (1<<UDRE0)));
	UDR0 = (uint8_t)ch;
}

void writeString(char *string)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	ec 01       	movw	r28, r24
	while(*string)
 328:	88 81       	ld	r24, Y
 32a:	88 23       	and	r24, r24
 32c:	29 f0       	breq	.+10     	; 0x338 <writeString+0x16>
 32e:	21 96       	adiw	r28, 0x01	; 1
	writeChar(*string++);
 330:	e3 df       	rcall	.-58     	; 0x2f8 <writeChar>
	UDR0 = (uint8_t)ch;
}

void writeString(char *string)
{
	while(*string)
 332:	89 91       	ld	r24, Y+
 334:	81 11       	cpse	r24, r1
 336:	fc cf       	rjmp	.-8      	; 0x330 <writeString+0xe>
	writeChar(*string++);
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <initUSART>:
	}//TODO correcte waardes toekennen
}

void initUSART() {

	UBRR0H = UBRR_BAUD >> 8;
 33e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (uint8_t) UBRR_BAUD;
 342:	87 e6       	ldi	r24, 0x67	; 103
 344:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0A = 0x00;
 348:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 352:	88 e1       	ldi	r24, 0x18	; 24
 354:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	writeString("usart werkt nog\n\r");
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	e2 cf       	rjmp	.-60     	; 0x322 <writeString>
 35e:	08 95       	ret

00000360 <charToInt>:
	writeChar(*string++);
}

int charToInt(char in) {
	int x;
	switch(in) {
 360:	84 36       	cpi	r24, 0x64	; 100
 362:	89 f0       	breq	.+34     	; 0x386 <charToInt+0x26>
 364:	28 f4       	brcc	.+10     	; 0x370 <charToInt+0x10>
 366:	80 32       	cpi	r24, 0x20	; 32
 368:	89 f0       	breq	.+34     	; 0x38c <charToInt+0x2c>
 36a:	81 36       	cpi	r24, 0x61	; 97
 36c:	49 f0       	breq	.+18     	; 0x380 <charToInt+0x20>
 36e:	11 c0       	rjmp	.+34     	; 0x392 <charToInt+0x32>
 370:	83 37       	cpi	r24, 0x73	; 115
 372:	19 f0       	breq	.+6      	; 0x37a <charToInt+0x1a>
 374:	87 37       	cpi	r24, 0x77	; 119
 376:	81 f0       	breq	.+32     	; 0x398 <charToInt+0x38>
 378:	0c c0       	rjmp	.+24     	; 0x392 <charToInt+0x32>
		case 'w':
			x = 1;
			break; //W will be used to go forward
		
		case 's':
			x = 2;
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	08 95       	ret
			break; //S will be used to go backward
			
		case 'a':
			x = 8;
 380:	88 e0       	ldi	r24, 0x08	; 8
 382:	90 e0       	ldi	r25, 0x00	; 0
			break; //A will be used to go left
 384:	08 95       	ret
			
		case 'd':
			x = 4;
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	90 e0       	ldi	r25, 0x00	; 0
			break; //D will be used to go right
 38a:	08 95       	ret
			
		case ' ':
			x = 128;
 38c:	80 e8       	ldi	r24, 0x80	; 128
 38e:	90 e0       	ldi	r25, 0x00	; 0
			break; //Spacebar will be used as a brake
 390:	08 95       	ret
			
		default:
			x = 0;
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
			break;
 396:	08 95       	ret

int charToInt(char in) {
	int x;
	switch(in) {
		case 'w':
			x = 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
		default:
			x = 0;
			break;
	}
	return x;
} // Used to take input from command line for now
 39c:	08 95       	ret

0000039e <verzenden>:

void verzenden() 
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
	//  uint8_t op[5];

	TWCR |= (1<<TWSTA);
 3a2:	ec eb       	ldi	r30, 0xBC	; 188
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 3ac:	80 81       	ld	r24, Z
 3ae:	88 23       	and	r24, r24
 3b0:	ec f7       	brge	.-6      	; 0x3ac <verzenden+0xe>
	//   op[0] = TWSR;
	TWDR=(8<<1);
 3b2:	80 e1       	ldi	r24, 0x10	; 16
 3b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b2 e0       	ldi	r27, 0x02	; 2
 3bc:	29 e1       	ldi	r18, 0x19	; 25
 3be:	32 e0       	ldi	r19, 0x02	; 2
	for (int i=0; i<3;i++)
	{
		TWCR=(1<<TWINT)|(1<<TWEN);
 3c0:	ec eb       	ldi	r30, 0xBC	; 188
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	94 e8       	ldi	r25, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));
		//    op[1] = TWSR;
		TWDR=motor[i];
 3c6:	cb eb       	ldi	r28, 0xBB	; 187
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
	while(!(TWCR & (1<<TWINT)));
	//   op[0] = TWSR;
	TWDR=(8<<1);
	for (int i=0; i<3;i++)
	{
		TWCR=(1<<TWINT)|(1<<TWEN);
 3ca:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));
 3cc:	80 81       	ld	r24, Z
 3ce:	88 23       	and	r24, r24
 3d0:	ec f7       	brge	.-6      	; 0x3cc <verzenden+0x2e>
		//    op[1] = TWSR;
		TWDR=motor[i];
 3d2:	8d 91       	ld	r24, X+
 3d4:	88 83       	st	Y, r24

	TWCR |= (1<<TWSTA);
	while(!(TWCR & (1<<TWINT)));
	//   op[0] = TWSR;
	TWDR=(8<<1);
	for (int i=0; i<3;i++)
 3d6:	a2 17       	cp	r26, r18
 3d8:	b3 07       	cpc	r27, r19
 3da:	b9 f7       	brne	.-18     	; 0x3ca <verzenden+0x2c>
		while(!(TWCR & (1<<TWINT)));
		//    op[1] = TWSR;
		TWDR=motor[i];
	}

	TWCR=(1<<TWINT)|(1<<TWEN);
 3dc:	84 e8       	ldi	r24, 0x84	; 132
 3de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
 3e2:	ec eb       	ldi	r30, 0xBC	; 188
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	88 23       	and	r24, r24
 3ea:	ec f7       	brge	.-6      	; 0x3e6 <verzenden+0x48>
	//  op[2] = TWSR;

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 3ec:	84 e9       	ldi	r24, 0x94	; 148
 3ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	//	while(!(TWCR & (1<<TWINT)));
	//  for(uint8_t i=0;i<3;++i) {
	// writeString("\n\r");writeInteger(op[0],16);
	// writeString(" ");writeInteger(op[1],16);
	// writeString(" ");writeInteger(op[2],16);
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <main>:
char uart_getchar(void);
int charToInt(char);
//Prototypes voor de functies

int main(void) {
	initUSART();
 3f8:	a2 df       	rcall	.-188    	; 0x33e <initUSART>
		} //Als de noodstop knop ingedrukt is moeten we deze direct uitvoeren
		else {
			doStuff();
		}
		if (motor[1] < 0) {motor[1] = 0;}
		if (motor[1] > 250) {motor[1] = 250;}
 3fa:	c6 e1       	ldi	r28, 0x16	; 22
 3fc:	d2 e0       	ldi	r29, 0x02	; 2
 3fe:	1a ef       	ldi	r17, 0xFA	; 250
//Prototypes voor de functies

int main(void) {
	initUSART();
	while(1) {
		knop = charToInt(uart_getchar());
 400:	83 df       	rcall	.-250    	; 0x308 <uart_getchar>
 402:	ae df       	rcall	.-164    	; 0x360 <charToInt>
 404:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <knop+0x1>
 408:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <knop>
		if (knop >= 128) {
 40c:	80 38       	cpi	r24, 0x80	; 128
 40e:	91 05       	cpc	r25, r1
 410:	14 f0       	brlt	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			stop();
 412:	44 df       	rcall	.-376    	; 0x29c <stop>
 414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		} //Als de noodstop knop ingedrukt is moeten we deze direct uitvoeren
		else {
			doStuff();
 416:	48 df       	rcall	.-368    	; 0x2a8 <doStuff>
		}
		if (motor[1] < 0) {motor[1] = 0;}
		if (motor[1] > 250) {motor[1] = 250;}
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	8b 3f       	cpi	r24, 0xFB	; 251
 41c:	08 f0       	brcs	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	19 83       	std	Y+1, r17	; 0x01
		if (motor[2] < 0) {motor[2] = 0;}
		if (motor[2] > 250) {motor[2] = 250;}
 420:	8a 81       	ldd	r24, Y+2	; 0x02
 422:	8b 3f       	cpi	r24, 0xFB	; 251
 424:	08 f0       	brcs	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	1a 83       	std	Y+2, r17	; 0x02
		//Onze snelheid mag niet meer dan 250 zijn, maar ook niet minder dan 0.
		switch(motor[0]) {
 428:	88 81       	ld	r24, Y
 42a:	84 30       	cpi	r24, 0x04	; 4
 42c:	a1 f0       	breq	.+40     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 42e:	18 f4       	brcc	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 430:	88 23       	and	r24, r24
 432:	29 f0       	breq	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 434:	14 c0       	rjmp	.+40     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 436:	88 30       	cpi	r24, 0x08	; 8
 438:	71 f0       	breq	.+28     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 43a:	8c 30       	cpi	r24, 0x0C	; 12
 43c:	81 f4       	brne	.+32     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			case 0:
			case 12:
				snelheid = (motor[1] + motor[2]) / 2;
 43e:	29 81       	ldd	r18, Y+1	; 0x01
 440:	8a 81       	ldd	r24, Y+2	; 0x02
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	82 0f       	add	r24, r18
 446:	91 1d       	adc	r25, r1
 448:	95 95       	asr	r25
 44a:	87 95       	ror	r24
 44c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 450:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			break;
 454:	04 c0       	rjmp	.+8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		
			case 4:
			case 8:
				snelheid = 0;
 456:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
 45a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
			break;
		}//Hier slaan we de huidige snelheid op
	verzenden();
 45e:	9f df       	rcall	.-194    	; 0x39e <verzenden>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	80 e7       	ldi	r24, 0x70	; 112
 464:	92 e0       	ldi	r25, 0x02	; 2
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop
 472:	c6 cf       	rjmp	.-116    	; 0x400 <__LOCK_REGION_LENGTH__>

00000474 <__tablejump2__>:
 474:	ee 0f       	add	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	88 1f       	adc	r24, r24
 47a:	8b bf       	out	0x3b, r24	; 59
 47c:	07 90       	elpm	r0, Z+
 47e:	f6 91       	elpm	r31, Z
 480:	e0 2d       	mov	r30, r0
 482:	19 94       	eijmp

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
