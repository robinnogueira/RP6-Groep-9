#include <avr/io.h>
int[] motor = {0, 0, 0}; //Richting, motor rechts en motor links
//Bandenrichting: 0: vooruit. 4: rechts achteruit. 8: links achteruit. 12: achteruit
bool langeafstand; //slaat op of we wel of niet voor lange afstanden bezig zijn
int knop; //Een int met hierin de binaire representatie van welke knoppen zijn ingedrukt
bool lastbuttonpressed; //TODO juiste datatype gebruiken
int snelheid; //snelheid die het laatste gebruikt is

int main(void)
{
    //TODO get value buttonpressed, longdistance
	motor = {motor[0], 0, 0} //opnieuw op nul zetten: wordt in de functies opnieuw aangepast.
    if (knop >= 128) {
        stop();
    } //Als de noodstop knop ingedrukt is moeten we deze direct uitvoeren
    else {
        switch (knop) {
            case 0: //niks, maar mag geen error returnen
                break;

            case 1: //pijl naar boven
                rechtdoor();
                break;
                
            case 2: //pijl naar onder
                achteruit();
                break;

case 4: //pijl naar rechts
                rechts();
                break;

case 5: //pijl naar boven & rechts
                rechtdoor();
                rechts();
                break;

            case 6: //pijl naar onder & rechts
                achteruit();
                rechts();
                break;
                
            case 8://pijl naar links
                links();
                break;

            case 9: //pijl naar boven & links
                rechtdoor();
                links();
                break;
            case 10: //pijl naar onder & links
                achteruit();
                links();
                break;

            case 16: //afstandswitch
                langeafstand = !(langeafstand);
                break;
                
case 17: //afstandswitch & pijl naar boven
                langeafstand = !(langeafstand);
                rechtdoor();
                break;
                
            case 18: //afstandswitch & pijl naar onder
                langeafstand = !(langeafstand);
                achteruit();
                break;

case 20: //afstandswitch & pijl naar rechts
                langeafstand = !(langeafstand);
                rechts();
                break;

case 21: //afstandswitch, pijl naar boven & rechts
                langeafstand = !(langeafstand);
                rechtdoor();
                rechts();
                break;

            case 22: //afstandswitch, pijl naar onder & rechts
                langeafstand = !(langeafstand);
                achteruit();
                rechts();
                break;
                
            case 24: //afstandswitch & pijl naar links
                langeafstand = !(langeafstand);
                links();
                break;

            case 25: //afstandswitch, pijl naar boven & links
                langeafstand = !(langeafstand);
                rechtdoor();
                links();
                break;
            case 26: //afstandswitch, pijl naar onder & links
                langeafstand = !(langeafstand);
                achteruit();
                links();
                break;

            default:
                //TODO return error voor invalide combinatie.
                break;
        }//TODO correcte waardes toekennen
	}
	if (motor[1] < 0) {motor[1] = 0};
	if (motor[1] > 255) {motor[1] = 255};
	if (motor[2] < 0) {motor[2] = 0};
	if (motor[2] > 255) {motor[2] = 255};
	switch(motor[0]) {
		case 0:
		case 12:
			snelheid = (motor[1] + motor[2]) / 2;
			break;
		case 4:
		case 8:
			snelheid = 0;
			break;
    }
}

//TODO doe iets met sensoren
//TODO pad planning implementeren

void rechtdoor () {
    if (langeafstand) {
		switch(motor[0]) {
			case 0:
				motor = {0, snelheid + 25, snelheid + 25};
				break;
			case 12:
				motor = {12, snelheid - 25, snelheid - 25};
				break;
		}
    } else {
		motor = {0, 100, 100};
    }
    return;
}
void achteruit () {
    if (langeafstand) {
		switch(motor[0]) {
			case 0:
				motor = {0, snelheid - 25, snelheid - 25};
				break;
			case 12:
				motor = {12, snelheid + 25, snelheid + 25};
				break;
		}
    } else {
		motor = {16, 100, 100};
    }
    return;
}

}
void links () {
	switch(motor[0]){
		case 0:
		case 12:
			motor = {motor[0], snelheid + 25, snelheid - 25};
		case 4:
		case 8:
			motor = {8, 50, 50};
			break;
	}
}
void rechts () {
	switch(motor[0]){
		case 0:
		case 12:
			motor = {motor[0], snelheid + 25, snelheid - 25};
		case 4:
		case 8:
			motor = {4, 50, 50};
			break;

	}
}

void stop () {
	motor = {motor[0], 0, 0};
}